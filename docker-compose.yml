version: '3.9'

services:
  mlflow:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5003:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${DB_USER}:${DB_PW}@db:${DB_PORT}/${DB}
      - MLFLOW_HOST=0.0.0.0

      # Configuration for S3 artifact storage
      - MLFLOW_ARTIFACTS_DESTINATION=s3://${AWS_BUCKET_NAME}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      minio-ready:
        condition: service_completed_successfully
      db-ready:
        condition: service_completed_successfully

  minio:
    restart: always
    image: minio/minio
    container_name: mlflow_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}

  create_s3_buckets:
    image: minio/mc
    depends_on:
      minio-ready:
        condition: service_completed_successfully
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 '${AWS_ACCESS_KEY_ID}' '${AWS_SECRET_ACCESS_KEY}') do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/${AWS_BUCKET_NAME};
      exit 0;
      "

  db-ready:
    image: postgres:14-alpine
    entrypoint: > 
      /bin/sh -c "until pg_isready -h db -p ${DB_PORT}; do echo waiting for database; sleep 2; done;"
    depends_on:
      - "db"
  
  minio-ready:
    image: minio/mc
    entrypoint: > 
      /bin/sh -c "/usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
            until /usr/bin/mc ping --error-count 1 --count 1 minio; do echo '...waiting for Minio to be ready...'; sleep 1; done;"
    depends_on:
      - "minio"

  db:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${DB}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PW}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s 